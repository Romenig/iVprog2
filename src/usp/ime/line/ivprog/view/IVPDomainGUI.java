package usp.ime.line.ivprog.view;

import java.util.HashMap;
import java.util.Observable;
import java.util.Vector;

import ilm.framework.domain.DomainGUI;
import ilm.framework.domain.DomainModel;

import javax.swing.JLabel;

import usp.ime.line.ivprog.IVProg2;
import usp.ime.line.ivprog.controller.IVPEventController;
import usp.ime.line.ivprog.model.components.datafactory.dataobjetcs.CodeComponent;
import usp.ime.line.ivprog.model.components.datafactory.dataobjetcs.DataObject;
import usp.ime.line.ivprog.model.components.datafactory.dataobjetcs.For;
import usp.ime.line.ivprog.model.components.datafactory.dataobjetcs.Function;
import usp.ime.line.ivprog.model.domain.IVPProgram;
import usp.ime.line.ivprog.model.domain.actions.AskUserNewObject;
import usp.ime.line.ivprog.model.domain.actions.AskUserRemove;
import usp.ime.line.ivprog.model.domain.actions.AskUserSetMessage;
import usp.ime.line.ivprog.model.domain.actions.AskUserSetType;
import usp.ime.line.ivprog.model.domain.actions.AttLineNewObject;
import usp.ime.line.ivprog.model.domain.actions.AttLineRemove;
import usp.ime.line.ivprog.model.domain.actions.AttLineSetExpression;
import usp.ime.line.ivprog.model.domain.actions.AttLineSetLeftVariable;
import usp.ime.line.ivprog.model.domain.actions.AttLineSetType;
import usp.ime.line.ivprog.model.domain.actions.CommentNewObject;
import usp.ime.line.ivprog.model.domain.actions.CommentRemove;
import usp.ime.line.ivprog.model.domain.actions.CommentSetText;
import usp.ime.line.ivprog.model.domain.actions.ForAddChild;
import usp.ime.line.ivprog.model.domain.actions.ForNewObject;
import usp.ime.line.ivprog.model.domain.actions.ForRemove;
import usp.ime.line.ivprog.model.domain.actions.ForRemoveChild;
import usp.ime.line.ivprog.model.domain.actions.ForSetIncrement;
import usp.ime.line.ivprog.model.domain.actions.ForSetIndexInitValue;
import usp.ime.line.ivprog.model.domain.actions.ForSetUpperBound;
import usp.ime.line.ivprog.model.domain.actions.FuncReferenceAddParameter;
import usp.ime.line.ivprog.model.domain.actions.FuncReferenceNewObject;
import usp.ime.line.ivprog.model.domain.actions.FuncReferenceRemove;
import usp.ime.line.ivprog.model.domain.actions.FuncReferenceRemoveParam;
import usp.ime.line.ivprog.model.domain.actions.FuncReferenceSetReferenced;
import usp.ime.line.ivprog.model.domain.actions.FunctionAddChild;
import usp.ime.line.ivprog.model.domain.actions.FunctionAddLocalVariable;
import usp.ime.line.ivprog.model.domain.actions.FunctionAddParameter;
import usp.ime.line.ivprog.model.domain.actions.FunctionCreateMain;
import usp.ime.line.ivprog.model.domain.actions.FunctionNewObject;
import usp.ime.line.ivprog.model.domain.actions.FunctionRemove;
import usp.ime.line.ivprog.model.domain.actions.FunctionRemoveChild;
import usp.ime.line.ivprog.model.domain.actions.FunctionRemoveLocalVariable;
import usp.ime.line.ivprog.model.domain.actions.FunctionRemoveParameter;
import usp.ime.line.ivprog.model.domain.actions.FunctionSetName;
import usp.ime.line.ivprog.model.domain.actions.FunctionSetReturnType;
import usp.ime.line.ivprog.model.domain.actions.IVPMatrixAddElement;
import usp.ime.line.ivprog.model.domain.actions.IVPMatrixNewObject;
import usp.ime.line.ivprog.model.domain.actions.IVPMatrixRefNewObject;
import usp.ime.line.ivprog.model.domain.actions.IVPMatrixRefRemove;
import usp.ime.line.ivprog.model.domain.actions.IVPMatrixRefSetColumnExpression;
import usp.ime.line.ivprog.model.domain.actions.IVPMatrixRefSetLineExpression;
import usp.ime.line.ivprog.model.domain.actions.IVPMatrixRefSetReferenced;
import usp.ime.line.ivprog.model.domain.actions.IVPMatrixRefSetType;
import usp.ime.line.ivprog.model.domain.actions.IVPMatrixRemove;
import usp.ime.line.ivprog.model.domain.actions.IVPMatrixSetDimensions;
import usp.ime.line.ivprog.model.domain.actions.IVPMatrixSetName;
import usp.ime.line.ivprog.model.domain.actions.IVPMatrixSetType;
import usp.ime.line.ivprog.model.domain.actions.IVPVEctorRefSetType;
import usp.ime.line.ivprog.model.domain.actions.IVPVectorAddElement;
import usp.ime.line.ivprog.model.domain.actions.IVPVectorNewObject;
import usp.ime.line.ivprog.model.domain.actions.IVPVectorRefNewObject;
import usp.ime.line.ivprog.model.domain.actions.IVPVectorRefRemove;
import usp.ime.line.ivprog.model.domain.actions.IVPVectorRefSetReferenced;
import usp.ime.line.ivprog.model.domain.actions.IVPVectorReferenceSetPosition;
import usp.ime.line.ivprog.model.domain.actions.IVPVectorRemove;
import usp.ime.line.ivprog.model.domain.actions.IVPVectorSetName;
import usp.ime.line.ivprog.model.domain.actions.IVPVectorSetType;
import usp.ime.line.ivprog.model.domain.actions.IfElseAddElseChild;
import usp.ime.line.ivprog.model.domain.actions.IfElseAddIfChild;
import usp.ime.line.ivprog.model.domain.actions.IfElseNewObject;
import usp.ime.line.ivprog.model.domain.actions.IfElseRemove;
import usp.ime.line.ivprog.model.domain.actions.IfElseRemoveElseChild;
import usp.ime.line.ivprog.model.domain.actions.IfElseRemoveIfChild;
import usp.ime.line.ivprog.model.domain.actions.OperationNewObject;
import usp.ime.line.ivprog.model.domain.actions.OperationRemove;
import usp.ime.line.ivprog.model.domain.actions.OperationSetExpA;
import usp.ime.line.ivprog.model.domain.actions.OperationSetExpB;
import usp.ime.line.ivprog.model.domain.actions.OperationSetType;
import usp.ime.line.ivprog.model.domain.actions.PrintNewObject;
import usp.ime.line.ivprog.model.domain.actions.PrintRemove;
import usp.ime.line.ivprog.model.domain.actions.PrintSetPrintable;
import usp.ime.line.ivprog.model.domain.actions.ReturnNewObject;
import usp.ime.line.ivprog.model.domain.actions.ReturnRemove;
import usp.ime.line.ivprog.model.domain.actions.ReturnSetExpression;
import usp.ime.line.ivprog.model.domain.actions.ReturnSetType;
import usp.ime.line.ivprog.model.domain.actions.VariableAddReference;
import usp.ime.line.ivprog.model.domain.actions.VariableNewObject;
import usp.ime.line.ivprog.model.domain.actions.VariableRefNewObject;
import usp.ime.line.ivprog.model.domain.actions.VariableRefRemove;
import usp.ime.line.ivprog.model.domain.actions.VariableRefSetReferenced;
import usp.ime.line.ivprog.model.domain.actions.VariableRemove;
import usp.ime.line.ivprog.model.domain.actions.VariableRemoveReference;
import usp.ime.line.ivprog.model.domain.actions.VariableSetName;
import usp.ime.line.ivprog.model.domain.actions.VariableSetType;
import usp.ime.line.ivprog.model.domain.actions.VariableSetValue;
import usp.ime.line.ivprog.model.domain.actions.WhileAddChild;
import usp.ime.line.ivprog.model.domain.actions.WhileNewObject;
import usp.ime.line.ivprog.model.domain.actions.WhileRemove;
import usp.ime.line.ivprog.model.domain.actions.WhileRemoveChild;
import usp.ime.line.ivprog.model.domain.actions.WhileSetCondition;
import usp.ime.line.ivprog.view.editor.IVPCanvas;
import usp.ime.line.ivprog.view.editor.IVPEditor;
import usp.ime.line.ivprog.view.editor.IVPFunctionBody;
import usp.ime.line.ivprog.view.editor.codeblocks.ForBlock;
import usp.ime.line.ivprog.view.menu.IVPMenu;
import usp.ime.line.ivprog.view.utils.IVPMouseListener;
import usp.ime.line.ivprog.view.utils.language.ResourceBundleIVP;

import java.awt.BorderLayout;
import java.awt.event.MouseEvent;

public class IVPDomainGUI extends DomainGUI {
	
	private boolean isMainSet = false;
	private IVPEditor editor = null;
	private IVPMenu menu = null;
	private IVPMouseListener ivpML;
	private IVPProgram program = null;
	private DomainRenderer guiRenderer = null;
	
	public IVPDomainGUI() {
		setLayout(new BorderLayout(0, 0));
		ivpML = IVProg2.getMouseListener();
		IVPEventController.setDomainGUI(this);
		addMouseListener(ivpML);
		guiRenderer = new DomainRenderer();
	}

	public void update(Observable o, Object arg) {
		if(o instanceof IVPProgram){
			System.out.println("Vem do programa ---------------- ");
			updateStrategy(arg);
			System.out.println("--------------------------------");
		}else {
			System.out.println("Vem do ass state");
		}
	}

	private void updateStrategy(Object domainObject) {
		if(domainObject instanceof Function){
			Function f = (Function) domainObject;
			IVPFunctionBody function = guiRenderer.buildFunction(f);
			editor.updateFunction(function);
		} else if(domainObject instanceof CodeComponent){
			if(((CodeComponent) domainObject).getEscope() == null){
				guiRenderer.buildNewComponent((DataObject) domainObject);
			} else {
				guiRenderer.rebuildComponent((DataObject) domainObject);
			}
		}
	}

	protected void initDomainGUI() {
		editor = new IVPEditor();
		menu = new IVPMenu();
		add(editor, BorderLayout.CENTER);
		add(menu, BorderLayout.WEST);
		initProgram();
		FunctionCreateMain fCM =  (FunctionCreateMain) _actionList.get("functioncreatemain");
		fCM.execute();
	}

	private void initProgram() {
		program = new IVPProgram();
		program.addObserver(this);
		program.setActionList(_actionList);
		getCurrentState().addObserver(program);
	}

	public void initDomainActionList(DomainModel model) {
		 _actionList = new HashMap();
		 FunctionCreateMain fCM = new FunctionCreateMain("functioncreatemain", "functioncreatemain");
		 fCM.setDomainModel(model);
		 _actionList.put("functioncreatemain", fCM);
		 AskUserNewObject aUNO = new AskUserNewObject("askusernewobject", "askusernewobject");
		 aUNO.setDomainModel(model);
		 _actionList.put("askusernewobject", aUNO);
		 AskUserRemove aUR = new AskUserRemove("askuserremove", "askuserremove");
		 aUR.setDomainModel(model);
		 _actionList.put("askuserremove", aUR);
		 AskUserSetMessage aUSM = new AskUserSetMessage("askusersetmessage", "askusersetmessage");
		 aUSM.setDomainModel(model);
		 _actionList.put("askusersetmessage", aUSM);
		 AskUserSetType aUST = new AskUserSetType("askusersettype", "askusersettype");
		 aUST.setDomainModel(model);
		 _actionList.put("askusersettype", aUST);
		 AttLineNewObject aLNO = new AttLineNewObject("attlinenewobject", "attlinenewobject");
		 aLNO.setDomainModel(model);
		 _actionList.put("attlinenewobject", aLNO);
		 AttLineRemove aLR = new AttLineRemove("attlineremove", "attlineremove");
		 aLR.setDomainModel(model);
		 _actionList.put("attlineremove", aLR);
		 AttLineSetExpression aLSE = new AttLineSetExpression("attlinesetexpression", "attlinesetexpression");
		 aLSE.setDomainModel(model);
		 _actionList.put("attlinesetexpression", aLSE);
		 AttLineSetLeftVariable aLSLV = new AttLineSetLeftVariable("attlinesetleftvariable", "attlinesetleftvariable");
		 aLSLV.setDomainModel(model);
		 _actionList.put("attlinesetleftvariable", aLSLV);
		 AttLineSetType aLST = new AttLineSetType("attlinesettype", "attlinesettype");
		 aLST.setDomainModel(model);
		 _actionList.put("attlinesettype", aLST);
		 CommentNewObject cNO = new CommentNewObject("commentnewobject", "commentnewobject");
		 cNO.setDomainModel(model);
		 _actionList.put("commentnewobject", cNO);
		 CommentRemove cR = new CommentRemove("commentremove", "commentremove");
		 cR.setDomainModel(model);
		 _actionList.put("commentremove", cR);
		 CommentSetText cST = new CommentSetText("commentsettext", "commentsettext");
		 cST.setDomainModel(model);
		 _actionList.put("commentsettext", cST);
		 ForNewObject fNO = new ForNewObject("fornewobject", "fornewobject");
		 fNO.setDomainModel(model);
		 _actionList.put("fornewobject", fNO);
		 ForAddChild forAC = new ForAddChild("foraddchild","foraddchild");
		 forAC.setDomainModel(model);
		 _actionList.put("foraddchild", forAC);
		 ForRemoveChild forRC = new ForRemoveChild("forremovechild","forremovechild");
		 forRC.setDomainModel(model);
		 _actionList.put("forremovechild", forRC);
		 ForRemove fR = new ForRemove("forremove", "forremove");
		 fR.setDomainModel(model);
		 _actionList.put("forremove", fR);
		 ForSetIncrement fSI = new ForSetIncrement("forsetincrement", "forsetincrement");
		 fSI.setDomainModel(model);
		 _actionList.put("forsetincrement", fSI);
		 ForSetIndexInitValue fSIIV = new ForSetIndexInitValue("forsetindexinitvalue", "forsetindexinitvalue");
		 fSIIV.setDomainModel(model);
		 _actionList.put("forsetindexinitvalue", fSIIV);
		 ForSetUpperBound fSUB = new ForSetUpperBound("forsetupperbound", "forsetupperbound");
		 fSUB.setDomainModel(model);
		 _actionList.put("forsetupperbound", fSUB);
		 FuncReferenceAddParameter fRAP = new FuncReferenceAddParameter("funcreferenceaddparameter", "funcreferenceaddparameter");
		 fRAP.setDomainModel(model);
		 _actionList.put("funcreferenceaddparameter", fRAP);
		 FuncReferenceNewObject fRNO = new FuncReferenceNewObject("funcreferencenewobject", "funcreferencenewobject");
		 fRNO.setDomainModel(model);
		 _actionList.put("funcreferencenewobject", fRNO);
		 FuncReferenceRemove fRR = new FuncReferenceRemove("funcreferenceremove", "funcreferenceremove");
		 fRR.setDomainModel(model);
		 _actionList.put("funcreferenceremove", fRR);
		 FuncReferenceRemoveParam fRRP = new FuncReferenceRemoveParam("funcreferenceremoveparam", "funcreferenceremoveparam");
		 fRRP.setDomainModel(model);
		 _actionList.put("funcreferenceremoveparam", fRRP);
		 FuncReferenceSetReferenced fRSR = new FuncReferenceSetReferenced("funcreferencesetreferenced", "funcreferencesetreferenced");
		 fRSR.setDomainModel(model);
		 _actionList.put("funcreferencesetreferenced", fRSR);
		 FunctionAddChild fAC = new FunctionAddChild("functionaddchild", "functionaddchild");
		 fAC.setDomainModel(model);
		 _actionList.put("functionaddchild", fAC);
		 FunctionAddLocalVariable fALV = new FunctionAddLocalVariable("functionaddlocalvariable", "functionaddlocalvariable");
		 fALV.setDomainModel(model);
		 _actionList.put("functionaddlocalvariable", fALV);
		 FunctionAddParameter fAP = new FunctionAddParameter("functionaddparameter", "functionaddparameter");
		 fAP.setDomainModel(model);
		 _actionList.put("functionaddparameter", fAP);
		 FunctionNewObject functionNO = new FunctionNewObject("functionnewobject", "functionnewobject");
		 functionNO.setDomainModel(model);
		 _actionList.put("functionnewobject", functionNO);
		 FunctionRemove functionR = new FunctionRemove("functionremove", "functionremove");
		 functionR.setDomainModel(model);
		 _actionList.put("functionremove", functionR);
		 FunctionRemoveChild fRC = new FunctionRemoveChild("functionremovechild", "functionremovechild");
		 fRC.setDomainModel(model);
		 _actionList.put("functionremovechild", fRC);
		 FunctionRemoveLocalVariable fRLV = new FunctionRemoveLocalVariable("functionremovelocalvariable", "functionremovelocalvariable");
		 fRLV.setDomainModel(model);
		 _actionList.put("functionremovelocalvariable", fRLV);
		 FunctionRemoveParameter fRP = new FunctionRemoveParameter("functionremoveparameter", "functionremoveparameter");
		 fRP.setDomainModel(model);
		 _actionList.put("functionremoveparameter", fRP);
		 FunctionSetName fSN = new FunctionSetName("functionsetname", "functionsetname");
		 fSN.setDomainModel(model);
		 _actionList.put("functionsetname", fSN);
		 FunctionSetReturnType fSRT = new FunctionSetReturnType("functionsetreturntype", "functionsetreturntype");
		 fSRT.setDomainModel(model);
		 _actionList.put("functionsetreturntype", fSRT);
		 IfElseAddElseChild iEAEC = new IfElseAddElseChild("ifelseaddelsechild", "ifelseaddelsechild");
		 iEAEC.setDomainModel(model);
		 _actionList.put("ifelseaddelsechild", iEAEC);
		 IfElseAddIfChild iEAIC = new IfElseAddIfChild("ifelseaddifchild", "ifelseaddifchild");
		 iEAIC.setDomainModel(model);
		 _actionList.put("ifelseaddifchild", iEAIC);
		 IfElseNewObject iENO = new IfElseNewObject("ifelsenewobject", "ifelsenewobject");
		 iENO.setDomainModel(model);
		 _actionList.put("ifelsenewobject", iENO);
		 IfElseRemove iER = new IfElseRemove("ifelseremove", "ifelseremove");
		 iER.setDomainModel(model);
		 _actionList.put("ifelseremove", iER);
		 IfElseRemoveElseChild iEREC = new IfElseRemoveElseChild("ifelseremoveelsechild", "ifelseremoveelsechild");
		 iEREC.setDomainModel(model);
		 _actionList.put("ifelseremoveelsechild", iEREC);
		 IfElseRemoveIfChild iERIC = new IfElseRemoveIfChild("ifelseremoveifchild", "ifelseremoveifchild");
		 iERIC.setDomainModel(model);
		 _actionList.put("ifelseremoveifchild", iERIC);
		 IVPMatrixAddElement iVPMAE = new IVPMatrixAddElement("ivpmatrixaddelement", "ivpmatrixaddelement");
		 iVPMAE.setDomainModel(model);
		 _actionList.put("ivpmatrixaddelement", iVPMAE);
		 IVPMatrixNewObject iVPMNO = new IVPMatrixNewObject("ivpmatrixnewobject", "ivpmatrixnewobject");
		 iVPMNO.setDomainModel(model);
		 _actionList.put("ivpmatrixnewobject", iVPMNO);
		 IVPMatrixRefNewObject iVPMRNO = new IVPMatrixRefNewObject("ivpmatrixrefnewobject", "ivpmatrixrefnewobject");
		 iVPMRNO.setDomainModel(model);
		 _actionList.put("ivpmatrixrefnewobject", iVPMRNO);
		 IVPMatrixRefRemove iVPMRR = new IVPMatrixRefRemove("ivpmatrixrefremove", "ivpmatrixrefremove");
		 iVPMRR.setDomainModel(model);
		 _actionList.put("ivpmatrixrefremove", iVPMRR);
		 IVPMatrixRefSetColumnExpression iVPMRSCE = new IVPMatrixRefSetColumnExpression("ivpmatrixrefsetcolumnexpression", "ivpmatrixrefsetcolumnexpression");
		 iVPMRSCE.setDomainModel(model);
		 _actionList.put("ivpmatrixrefsetcolumnexpression", iVPMRSCE);
		 IVPMatrixRefSetLineExpression iVPMRSLE = new IVPMatrixRefSetLineExpression("ivpmatrixrefsetlineexpression", "ivpmatrixrefsetlineexpression");
		 iVPMRSLE.setDomainModel(model);
		 _actionList.put("ivpmatrixrefsetlineexpression", iVPMRSLE);
		 IVPMatrixRefSetReferenced iVPMRSR = new IVPMatrixRefSetReferenced("ivpmatrixrefsetreferenced", "ivpmatrixrefsetreferenced");
		 iVPMRSR.setDomainModel(model);
		 _actionList.put("ivpmatrixrefsetreferenced", iVPMRSR);
		 IVPMatrixRefSetType iVPMRST = new IVPMatrixRefSetType("ivpmatrixrefsettype", "ivpmatrixrefsettype");
		 iVPMRST.setDomainModel(model);
		 _actionList.put("ivpmatrixrefsettype", iVPMRST);
		 IVPMatrixRemove iVPMR = new IVPMatrixRemove("ivpmatrixremove", "ivpmatrixremove");
		 iVPMR.setDomainModel(model);
		 _actionList.put("ivpmatrixremove", iVPMR);
		 IVPMatrixSetDimensions iVPMSD = new IVPMatrixSetDimensions("ivpmatrixsetdimensions", "ivpmatrixsetdimensions");
		 iVPMSD.setDomainModel(model);
		 _actionList.put("ivpmatrixsetdimensions", iVPMSD);
		 IVPMatrixSetName iVPMSN = new IVPMatrixSetName("ivpmatrixsetname", "ivpmatrixsetname");
		 iVPMSN.setDomainModel(model);
		 _actionList.put("ivpmatrixsetname", iVPMSN);
		 IVPMatrixSetType iVPMST = new IVPMatrixSetType("ivpmatrixsettype", "ivpmatrixsettype");
		 iVPMST.setDomainModel(model);
		 _actionList.put("ivpmatrixsettype", iVPMST);
		 IVPVectorAddElement iVPVAE = new IVPVectorAddElement("ivpvectoraddelement", "ivpvectoraddelement");
		 iVPVAE.setDomainModel(model);
		 _actionList.put("ivpvectoraddelement", iVPVAE);
		 IVPVectorNewObject iVPVNO = new IVPVectorNewObject("ivpvectornewobject", "ivpvectornewobject");
		 iVPVNO.setDomainModel(model);
		 _actionList.put("ivpvectornewobject", iVPVNO);
		 IVPVectorReferenceSetPosition iVPVRSP = new IVPVectorReferenceSetPosition("ivpvectorreferencesetposition", "ivpvectorreferencesetposition");
		 iVPVRSP.setDomainModel(model);
		 _actionList.put("ivpvectorreferencesetposition", iVPVRSP);
		 IVPVectorRefNewObject iVPVRNO = new IVPVectorRefNewObject("ivpvectorrefnewobject", "ivpvectorrefnewobject");
		 iVPVRNO.setDomainModel(model);
		 _actionList.put("ivpvectorrefnewobject", iVPVRNO);
		 IVPVectorRefRemove iVPVRR = new IVPVectorRefRemove("ivpvectorrefremove", "ivpvectorrefremove");
		 iVPVRR.setDomainModel(model);
		 _actionList.put("ivpvectorrefremove", iVPVRR);
		 IVPVectorRefSetReferenced iVPVRSR = new IVPVectorRefSetReferenced("ivpvectorrefsetreferenced", "ivpvectorrefsetreferenced");
		 iVPVRSR.setDomainModel(model);
		 _actionList.put("ivpvectorrefsetreferenced", iVPVRSR);
		 IVPVEctorRefSetType iVPVERST = new IVPVEctorRefSetType("ivpvectorrefsettype", "ivpvectorrefsettype");
		 iVPVERST.setDomainModel(model);
		 _actionList.put("ivpvectorrefsettype", iVPVERST);
		 IVPVectorRemove iVPVR = new IVPVectorRemove("ivpvectorremove", "ivpvectorremove");
		 iVPVR.setDomainModel(model);
		 _actionList.put("ivpvectorremove", iVPVR);
		 IVPVectorSetName iVPVSN = new IVPVectorSetName("ivpvectorsetname", "ivpvectorsetname");
		 iVPVSN.setDomainModel(model);
		 _actionList.put("ivpvectorsetname", iVPVSN);
		 IVPVectorSetType iVPVST = new IVPVectorSetType("ivpvectorsettype", "ivpvectorsettype");
		 iVPVST.setDomainModel(model);
		 _actionList.put("ivpvectorsettype", iVPVST);
		 OperationNewObject oNO = new OperationNewObject("operationnewobject", "operationnewobject");
		 oNO.setDomainModel(model);
		 _actionList.put("operationnewobject", oNO);
		 OperationRemove oR = new OperationRemove("operationremove", "operationremove");
		 oR.setDomainModel(model);
		 _actionList.put("operationremove", oR);
		 OperationSetExpA oSEA = new OperationSetExpA("operationsetexpa", "operationsetexpa");
		 oSEA.setDomainModel(model);
		 _actionList.put("operationsetexpa", oSEA);
		 OperationSetExpB oSEB = new OperationSetExpB("operationsetexpb", "operationsetexpb");
		 oSEB.setDomainModel(model);
		 _actionList.put("operationsetexpb", oSEB);
		 OperationSetType oST = new OperationSetType("operationsettype", "operationsettype");
		 oST.setDomainModel(model);
		 _actionList.put("operationsettype", oST);
		 PrintNewObject pNO = new PrintNewObject("printnewobject", "printnewobject");
		 pNO.setDomainModel(model);
		 _actionList.put("printnewobject", pNO);
		 PrintRemove pR = new PrintRemove("printremove", "printremove");
		 pR.setDomainModel(model);
		 _actionList.put("printremove", pR);
		 PrintSetPrintable pSP = new PrintSetPrintable("printsetprintable", "printsetprintable");
		 pSP.setDomainModel(model);
		 _actionList.put("printsetprintable", pSP);
		 ReturnNewObject rNO = new ReturnNewObject("returnnewobject", "returnnewobject");
		 rNO.setDomainModel(model);
		 _actionList.put("returnnewobject", rNO);
		 ReturnRemove rR = new ReturnRemove("returnremove", "returnremove");
		 rR.setDomainModel(model);
		 _actionList.put("returnremove", rR);
		 ReturnSetExpression rSE = new ReturnSetExpression("returnsetexpression", "returnsetexpression");
		 rSE.setDomainModel(model);
		 _actionList.put("returnsetexpression", rSE);
		 ReturnSetType rST = new ReturnSetType("returnsettype", "returnsettype");
		 rST.setDomainModel(model);
		 _actionList.put("returnsettype", rST);
		 VariableAddReference vAR = new VariableAddReference("variableaddreference", "variableaddreference");
		 vAR.setDomainModel(model);
		 _actionList.put("variableaddreference", vAR);
		 VariableNewObject vNO = new VariableNewObject("variablenewobject", "variablenewobject");
		 vNO.setDomainModel(model);
		 _actionList.put("variablenewobject", vNO);
		 VariableRefNewObject vRNO = new VariableRefNewObject("variablerefnewobject", "variablerefnewobject");
		 vRNO.setDomainModel(model);
		 _actionList.put("variablerefnewobject", vRNO);
		 VariableRefRemove vRR = new VariableRefRemove("variablerefremove", "variablerefremove");
		 vRR.setDomainModel(model);
		 _actionList.put("variablerefremove", vRR);
		 VariableRefSetReferenced vRSR = new VariableRefSetReferenced("variablerefsetreferenced", "variablerefsetreferenced");
		 vRSR.setDomainModel(model);
		 _actionList.put("variablerefsetreferenced", vRSR);
		 VariableRemove vR = new VariableRemove("variableremove", "variableremove");
		 vR.setDomainModel(model);
		 _actionList.put("variableremove", vR);
		 VariableRemoveReference variableRemoveReference = new VariableRemoveReference("variableremovereference", "variableremovereference");
		 variableRemoveReference.setDomainModel(model);
		 _actionList.put("variableremovereference", variableRemoveReference);
		 VariableSetName vSN = new VariableSetName("variablesetname", "variablesetname");
		 vSN.setDomainModel(model);
		 _actionList.put("variablesetname", vSN);
		 VariableSetType vST = new VariableSetType("variablesettype", "variablesettype");
		 vST.setDomainModel(model);
		 _actionList.put("variablesettype", vST);
		 VariableSetValue vSV = new VariableSetValue("variablesetvalue", "variablesetvalue");
		 vSV.setDomainModel(model);
		 _actionList.put("variablesetvalue", vSV);
		 WhileAddChild wAC = new WhileAddChild("whileaddchild", "whileaddchild");
		 wAC.setDomainModel(model);
		 _actionList.put("whileaddchild", wAC);
		 WhileNewObject wNO = new WhileNewObject("whilenewobject", "whilenewobject");
		 wNO.setDomainModel(model);
		 _actionList.put("whilenewobject", wNO);
		 WhileRemove wR = new WhileRemove("whileremove", "whileremove");
		 wR.setDomainModel(model);
		 _actionList.put("whileremove", wR);
		 WhileRemoveChild wRC = new WhileRemoveChild("whileremovechild", "whileremovechild");
		 wRC.setDomainModel(model);
		 _actionList.put("whileremovechild", wRC);
		 WhileSetCondition wSC = new WhileSetCondition("whilesetcondition", "whilesetcondition");
		 wSC.setDomainModel(model);
		 _actionList.put("whilesetcondition", wSC);
	}
	
	public Vector getSelectedObjects() {
		return null;
	}

}
